{
	"id": 0,
	"name": "@lowes-tech/bds-react/DatePicker",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 101,
			"name": "default",
			"kind": 16777216,
			"kindString": "Reference",
			"flags": {},
			"target": 1
		},
		{
			"id": 97,
			"name": "DatePickerChangeInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 100,
					"name": "date",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Parsed date or range of dates"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Date"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.date"
					}
				},
				{
					"id": 98,
					"name": "from",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "From either 'TextPicker', 'SelectPicker', or 'CalendarPicker'"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "TextPicker"
							},
							{
								"type": "literal",
								"value": "SelectPicker"
							},
							{
								"type": "literal",
								"value": "CalendarPicker"
							}
						]
					}
				},
				{
					"id": 99,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value is always a string"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						100,
						98,
						99
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DatePickerNativeChangeInfo"
						},
						{
							"type": "literal",
							"value": "from"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 5,
			"name": "DatePickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 38,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.as"
					}
				},
				{
					"id": 34,
					"name": "calendarProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Calendar props to extend the calendar with if needed"
					},
					"type": {
						"type": "reference",
						"name": "CalendarProps"
					}
				},
				{
					"id": 37,
					"name": "clearButtonProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Props for clear button"
					},
					"type": {
						"type": "reference",
						"name": "IconButtonProps"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.clearButtonProps"
					}
				},
				{
					"id": 7,
					"name": "closeKeys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Event keys that will trigger close when focused on"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 70,
					"name": "component",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Component to render text input with"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "ComponentClass"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "FunctionComponent"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.component"
					}
				},
				{
					"id": 76,
					"name": "customIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean prop to have custom icons show correct coloring"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customIcon"
					}
				},
				{
					"id": 8,
					"name": "date",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Parsable date for the current date\nCan be updated externally and given as a default date",
						"text": "It can accept the following values\n JS Date instance => `new Date(2020, 06, 19)`\n String date => `'2020-07-19'`\n Number timestamp => `1595116800`\n"
					},
					"type": {
						"type": "reference",
						"name": "ParsableDate"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.date"
					}
				},
				{
					"id": 9,
					"name": "dates",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List of parsable dates to only allow the user to select from",
						"text": "It can accept the following values\n JS Date instance => `new Date(2020, 06, 19)`\n String date => `'2020-07-19'`\n Number timestamp => `1595116800`\n ParsableDateObject => {\n     label: 'Today, July 19, 2020',\n     value: '2020-07-19' // Can be any `ParsableDate`\n }\n ParsableDateRange => {\n     label: 'Today, July 19, 2020',\n     start: '2020-07-19' // Can be any `ParsableDate`\n     end: '2020-07-20' // Can be any `ParsableDate`\n }\n"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDate"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateObject"
								}
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.dates"
					}
				},
				{
					"id": 42,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.defaultValue"
					}
				},
				{
					"id": 10,
					"name": "delayClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Amount in milliseconds to delay closing the popover\nwhen a value is selected from the list"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 11,
					"name": "delayOpen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Amount in milliseconds to delay opening the popover"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 12,
					"name": "disableDates",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List of dates to disable"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "ParsableDate"
						}
					}
				},
				{
					"id": 13,
					"name": "disableFuture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to disable all dates after today"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 83,
					"name": "disableNative",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not native browser functionality is disabled"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableNative"
					}
				},
				{
					"id": 14,
					"name": "disablePast",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to disable all dates before today"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 39,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not input is disabled"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 95,
					"name": "format",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.format"
					}
				},
				{
					"id": 77,
					"name": "hiddenLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenLabel"
					}
				},
				{
					"id": 80,
					"name": "iconClosed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed when closed"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.iconClosed"
					}
				},
				{
					"id": 79,
					"name": "iconOpened",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed when opened"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.iconOpened"
					}
				},
				{
					"id": 73,
					"name": "interaction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial interaction of component"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.interaction"
					}
				},
				{
					"id": 72,
					"name": "itemAfter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed after text input"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.itemAfter"
					}
				},
				{
					"id": 71,
					"name": "itemBefore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed before text input"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.itemBefore"
					}
				},
				{
					"id": 82,
					"name": "mask",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "RegExp"
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.mask"
					}
				},
				{
					"id": 84,
					"name": "maskPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.maskPlaceholder"
					}
				},
				{
					"id": 16,
					"name": "maxDate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Parsable date to disable all dates after given date"
					},
					"type": {
						"type": "reference",
						"name": "ParsableDate"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.maxDate"
					}
				},
				{
					"id": 15,
					"name": "minDate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Parsable date to disable all dates before given date"
					},
					"type": {
						"type": "reference",
						"name": "ParsableDate"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.minDate"
					}
				},
				{
					"id": 52,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onBlur` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 53,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 54,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onBlur` trigger event"
											},
											"parameters": [
												{
													"id": 55,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 56,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 57,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 58,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onBlur` trigger event"
											},
											"parameters": [
												{
													"id": 59,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 60,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 61,
					"name": "onClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onChange` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 62,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 63,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onChange` trigger event"
											},
											"parameters": [
												{
													"id": 64,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												},
												{
													"id": 65,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 66,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 67,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onClick` trigger event"
											},
											"parameters": [
												{
													"id": 68,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												},
												{
													"id": 69,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClick"
					}
				},
				{
					"id": 43,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onFocus` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 44,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 45,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onFocus` trigger event"
											},
											"parameters": [
												{
													"id": 46,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 47,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 48,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 49,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onFocus` trigger event"
											},
											"parameters": [
												{
													"id": 50,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 51,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 6,
					"name": "openKeys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Event keys that will trigger open when focused on"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 78,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDate"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateObject"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateRange"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.options"
					}
				},
				{
					"id": 94,
					"name": "optionsLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsLabel"
					}
				},
				{
					"id": 35,
					"name": "popoverProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Popover override props"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PopoverProps"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 36,
					"name": "popperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Popover override props",
						"text": "Alias of `popoverProps`\n"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PopoverProps"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 31,
					"name": "render",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the rendered UI/UX of the component",
						"text": "Overrides automatically switching\n"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "custom"
							},
							{
								"type": "literal",
								"value": "native"
							}
						]
					}
				},
				{
					"id": 93,
					"name": "selectWrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "object"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectWrapperProps"
					}
				},
				{
					"id": 33,
					"name": "shape",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shape of the input and popover"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "rounded"
							},
							{
								"type": "literal",
								"value": "squared"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.shape"
					}
				},
				{
					"id": 40,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Size of component."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "small"
							},
							{
								"type": "literal",
								"value": "large"
							},
							{
								"type": "literal",
								"value": "medium"
							},
							{
								"type": "literal",
								"value": "jumbo"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.size"
					}
				},
				{
					"id": 81,
					"name": "stacked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.stacked"
					}
				},
				{
					"id": 32,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "State of the native date picker\nEither 'error' or 'default'"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "error"
							},
							{
								"type": "literal",
								"value": "success"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.state"
					}
				},
				{
					"id": 75,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Adding a suffix abbreviation to the end of the field"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.suffix"
					}
				},
				{
					"id": 92,
					"name": "textWrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									},
									{
										"type": "literal",
										"value": ""
									}
								],
								"name": "BackyardBaseProps"
							},
							{
								"type": "intrinsic",
								"name": "object"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.textWrapperProps"
					}
				},
				{
					"id": 41,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "date"
							},
							{
								"type": "literal",
								"value": "time"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.type"
					}
				},
				{
					"id": 74,
					"name": "wrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							},
							{
								"type": "literal",
								"value": ""
							}
						],
						"name": "BackyardBaseProps"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.wrapperProps"
					}
				},
				{
					"id": 85,
					"name": "beforeMaskedStateChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 86,
							"name": "beforeMaskedStateChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 87,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "InputState"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "InputState"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.beforeMaskedStateChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeMaskedStateChange"
					}
				},
				{
					"id": 20,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 21,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onChange` trigger function for when either\nthe native component or the custom calendar change interaction occurs"
							},
							"parameters": [
								{
									"id": 22,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "ChangeEvent"
									}
								},
								{
									"id": 23,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 97,
										"name": "DatePickerChangeInfo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 28,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 29,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onClear` trigger function for when\nthe clear button is clicked"
							},
							"parameters": [
								{
									"id": 30,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Omit.onClear"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 26,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 27,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onClose` trigger function for when the calendar popover closes"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 88,
					"name": "onDateChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 89,
							"name": "onDateChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 90,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "ChangeEvent"
									}
								},
								{
									"id": 91,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextPickerInfo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onDateChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onDateChange"
					}
				},
				{
					"id": 17,
					"name": "onKeyDown",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 18,
							"name": "onKeyDown",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onKeyDown` trigger event for\nwhen the user presses a key on the `select`"
							},
							"parameters": [
								{
									"id": 19,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DatePickerNativeRef"
											}
										],
										"name": "KeyboardEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Omit.onKeyDown"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Omit.onKeyDown"
					}
				},
				{
					"id": 24,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 25,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onOpen` trigger function for when the calendar popover opens"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						38,
						34,
						37,
						7,
						70,
						76,
						8,
						9,
						42,
						10,
						11,
						12,
						13,
						83,
						14,
						39,
						95,
						77,
						80,
						79,
						73,
						72,
						71,
						82,
						84,
						16,
						15,
						52,
						61,
						43,
						6,
						78,
						94,
						35,
						36,
						31,
						93,
						33,
						40,
						81,
						32,
						75,
						92,
						41,
						74
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						85,
						20,
						28,
						26,
						88,
						17,
						24
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DatePickerNativeProps"
						},
						{
							"type": "reference",
							"name": "DatePickerOverrideProps"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 4,
			"name": "DatePickerRef",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "reference",
				"name": "DatePickerNativeRef"
			}
		},
		{
			"id": 1,
			"name": "DatePicker",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Backyard React Date Picker",
				"text": "`DatePicker` is used for selecting dates from a calendar, either through\nthe native date picker for mobile devices, or through a custom calendar popover.\n\nThe text input of the picker uses `type` === 'date' for supporting browser, while gracefully\ndefaulting to a `text` input type with masking to help the user enter the correct date.\n\nThis component has many variants dependending on the props given.\n\nFor a regular Date Picker with all dates selectable, use the default:\n```\n <DatePicker />\n```\n> This Date Picker gives the user a text `input` and a calendar popover to use to select any date\n> On Mobile displays, this component switches to an `input` with `type` === 'date' for native browsers\n\nFor a date picker that only allows the user to select certain dates, use the `dates` prop:\n```\n <DatePicker\n     label=\"Record Date\"\n     dates={[\n         { label: 'Yesterday 8:00 AM', value: '2020-07-18' },\n         { label: 'Today 9:15 AM', value: '2020-07-19' },\n         { label: 'Tomorrow 9:45 AM', value: '2020-07-20' }\n     ]}\n />\n // Or...\n <DatePicker\n     label=\"Record Date\"\n     dates={[\n         '2020-07-18',\n         '2020-07-19',\n         '2020-07-20'\n     ]}\n />\n // Or...\n <DatePicker\n     label=\"Record Date\"\n     dates={[\n         new Date(2020, 06, 18),\n         new Date(2020, 06, 19),\n         new Date(2020, 06, 20)\n     ]}\n />\n```\n> This Date Picker gives the user a read-only `select` and a calendar popover to use to select only the dates provided\n> `dates` can take a list of `Date`s, date strings ('yyyy-MM-dd'), or an option object for custom labels with the value\n> On mobile displays, removes the popover and uses the native `select` to select the date\n\nFor a less defined date picker that has a min, max, and some disabled dates in between, you can also use:\n```\n <DatePicker\n     label=\"Record Date\"\n     minDate=\"2020-07-10\"\n     maxDate=\"2020-07-27\"\n     disableDates={[\n         '2020-07-18',\n         '2020-07-19',\n         '2020-07-20'\n     ]}\n />\n```\n> This Date Picker gives the user a text `input` and a calendar popover to use to select and dates that are not disabled\n> `disableDates`, `minDate`, and `maxDate` can take a list of `Date`s, date strings ('yyyy-MM-dd')\n> On mobile displays, removes the popover and uses the native `date` input\n >> NOTE: mobile browsers do not utilize `disableDates`, but will utilize `minDate` and `maxDate`\n\nThe props `date`, `minDate`, `maxDate`, and `disabledDates` all use the `ParsableDate` type\nThey can accept the following values as inputs:\n JS Date instance => `new Date(2020, 06, 19)`\n String date => `'2020-07-19'`\n Number timestamp => `1595116800`\n\nThe prop `dates` can accept the `ParsableDateObject` or the `ParsableDateRange` types in addition to `ParsableDate`\nIt can accept the following values\n JS Date instance => `new Date(2020, 06, 19)`\n String date => `'2020-07-19'`\n Number timestamp => `1595116800`\n ParsableDateObject => {\n     label: 'Today, July 19, 2020',\n     value: '2020-07-19' // Can be any `ParsableDate`\n }\n ParsableDateRange => {\n     label: 'Today, July 19, 2020',\n     start: '2020-07-19' // Can be any `ParsableDate`\n     end: '2020-07-20' // Can be any `ParsableDate`\n }\n"
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 5,
								"name": "DatePickerProps"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3,
											"name": "ref",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3
											]
										}
									]
								}
							}
						]
					}
				],
				"name": "BDSForwardRef"
			},
			"defaultValue": "..."
		}
	],
	"groups": [
		{
			"title": "References",
			"kind": 16777216,
			"children": [
				101
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				97,
				5
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				4
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				1
			]
		}
	]
}
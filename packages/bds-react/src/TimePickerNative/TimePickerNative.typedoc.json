{
	"id": 0,
	"name": "@lowes-tech/bds-react/TimePickerNative",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 86,
			"name": "default",
			"kind": 16777216,
			"kindString": "Reference",
			"flags": {},
			"target": 1
		},
		{
			"id": 5,
			"name": "TimePickerNativeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 21,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.as"
					}
				},
				{
					"id": 79,
					"name": "clearButtonProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"name": "IconButtonProps"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.clearButtonProps"
					}
				},
				{
					"id": 54,
					"name": "component",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Component to render text input with"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "ComponentClass"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "FunctionComponent"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.component"
					}
				},
				{
					"id": 61,
					"name": "customIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean prop to have custom icons show correct coloring"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customIcon"
					}
				},
				{
					"id": 26,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.defaultValue"
					}
				},
				{
					"id": 68,
					"name": "disableNative",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not native browser functionality is disabled"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableNative"
					}
				},
				{
					"id": 22,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not input is disabled"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 80,
					"name": "format",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.format"
					}
				},
				{
					"id": 62,
					"name": "hiddenLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenLabel"
					}
				},
				{
					"id": 65,
					"name": "iconClosed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed when closed"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.iconClosed"
					}
				},
				{
					"id": 64,
					"name": "iconOpened",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed when opened"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.iconOpened"
					}
				},
				{
					"id": 57,
					"name": "interaction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial interaction of component"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.interaction"
					}
				},
				{
					"id": 56,
					"name": "itemAfter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed after text input"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.itemAfter"
					}
				},
				{
					"id": 55,
					"name": "itemBefore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon displayed before text input"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.itemBefore"
					}
				},
				{
					"id": 67,
					"name": "mask",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "RegExp"
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.mask"
					}
				},
				{
					"id": 69,
					"name": "maskPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.maskPlaceholder"
					}
				},
				{
					"id": 10,
					"name": "maxTime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum time allowed in time picker\nMust be 24h format string ('HH:mm')"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 9,
					"name": "minTime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Minimum time allowed in time picker\nMust be 24h format string ('HH:mm')"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 36,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onBlur` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 37,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 38,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onBlur` trigger event"
											},
											"parameters": [
												{
													"id": 39,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 40,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 41,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 42,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onBlur` trigger event"
											},
											"parameters": [
												{
													"id": 43,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 44,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 45,
					"name": "onClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onChange` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 46,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 47,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onChange` trigger event"
											},
											"parameters": [
												{
													"id": 48,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												},
												{
													"id": 49,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 50,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 51,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onClick` trigger event"
											},
											"parameters": [
												{
													"id": 52,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												},
												{
													"id": 53,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClick"
					}
				},
				{
					"id": 27,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`onFocus` trigger event"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 28,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 29,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onFocus` trigger event"
											},
											"parameters": [
												{
													"id": 30,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Element"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 31,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 32,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 33,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "`onFocus` trigger event"
											},
											"parameters": [
												{
													"id": 34,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "DOM Event"
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLSelectElement"
															},
															{
																"type": "reference",
																"name": "Element"
															}
														],
														"name": "FocusEvent"
													}
												},
												{
													"id": 35,
													"name": "option",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "option info object\n"
													},
													"type": {
														"type": "reference",
														"name": "SelectOptionInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 63,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDate"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateObject"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateRange"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.options"
					}
				},
				{
					"id": 11,
					"name": "optionsLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Options label from `SelectPicker`"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.optionsLabel"
					}
				},
				{
					"id": 78,
					"name": "selectWrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "object"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectWrapperProps"
					}
				},
				{
					"id": 20,
					"name": "shape",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shape of the component"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "rounded"
							},
							{
								"type": "literal",
								"value": "squared"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.shape"
					}
				},
				{
					"id": 23,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Size of component."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "small"
							},
							{
								"type": "literal",
								"value": "large"
							},
							{
								"type": "literal",
								"value": "medium"
							},
							{
								"type": "literal",
								"value": "jumbo"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.size"
					}
				},
				{
					"id": 66,
					"name": "stacked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.stacked"
					}
				},
				{
					"id": 58,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Visual state of component"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "error"
							},
							{
								"type": "literal",
								"value": "success"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.state"
					}
				},
				{
					"id": 6,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Step allowed by the native input"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.step"
					}
				},
				{
					"id": 60,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Adding a suffix abbreviation to the end of the field"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.suffix"
					}
				},
				{
					"id": 77,
					"name": "textWrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									},
									{
										"type": "literal",
										"value": ""
									}
								],
								"name": "BackyardBaseProps"
							},
							{
								"type": "intrinsic",
								"name": "object"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.textWrapperProps"
					}
				},
				{
					"id": 7,
					"name": "time",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Current parsable time\nCan be used as a default and changed externally"
					},
					"type": {
						"type": "reference",
						"name": "ParsableDate"
					}
				},
				{
					"id": 8,
					"name": "times",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List of parsable times\nCan be in the format of a timestamp, a Date instance, a 24h string, or a `TimeItem` for list selection"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDate"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateObject"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ParsableDateRange"
								}
							}
						]
					}
				},
				{
					"id": 24,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "date"
							},
							{
								"type": "literal",
								"value": "time"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.type"
					}
				},
				{
					"id": 25,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 59,
					"name": "wrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							},
							{
								"type": "literal",
								"value": ""
							}
						],
						"name": "BackyardBaseProps"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.wrapperProps"
					}
				},
				{
					"id": 70,
					"name": "beforeMaskedStateChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 71,
							"name": "beforeMaskedStateChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 72,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "InputState"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "InputState"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.beforeMaskedStateChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeMaskedStateChange"
					}
				},
				{
					"id": 12,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 13,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onChange` trigger"
							},
							"parameters": [
								{
									"id": 14,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "ChangeEvent"
									}
								},
								{
									"id": 15,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 81,
										"name": "TimePickerNativeChangeInfo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 16,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 17,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onClear` trigger function for when\nthe clear button is clicked"
							},
							"parameters": [
								{
									"id": 18,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Omit.onClear"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 73,
					"name": "onDateChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 74,
							"name": "onDateChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 75,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "ChangeEvent"
									}
								},
								{
									"id": 76,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextPickerInfo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onDateChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onDateChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						21,
						79,
						54,
						61,
						26,
						68,
						22,
						80,
						62,
						65,
						64,
						57,
						56,
						55,
						67,
						69,
						10,
						9,
						36,
						45,
						27,
						63,
						11,
						78,
						20,
						23,
						66,
						58,
						6,
						60,
						77,
						7,
						8,
						24,
						25,
						59
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						70,
						12,
						16,
						73
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "SelectAndTextPickerProps"
						},
						{
							"type": "reference",
							"name": "TimePickerNativeOverrideProps"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 81,
			"name": "TimePickerNativeChangeInfo",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 82,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 83,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "From either `SelectPicker` or `TextPicker`"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "SelectPicker"
									},
									{
										"type": "literal",
										"value": "TextPicker"
									}
								]
							}
						},
						{
							"id": 85,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Time string in 24h format ('HH:mm')\nOr Range of time strings"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 84,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Value of the change info as a string"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								83,
								85,
								84
							]
						}
					]
				}
			}
		},
		{
			"id": 4,
			"name": "TimePickerNativeRef",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "TextPickerRef"
					},
					{
						"type": "reference",
						"name": "SelectPickerRef"
					}
				]
			}
		},
		{
			"id": 1,
			"name": "TimePickerNative",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Backyard React Time Picker Native",
				"text": "`TimePickerNative` is used for selecting times from a timepicker through the native browser.\nIt is only intended to be used in mobile-only environments to save data size.\n\nThe text input of the picker uses `type` === 'time'.\n\nThis component has many variants dependending on the props given.\n\nFor a regular Time Picker with all times selectable, use the default:\n```\n <TimePickerNative />\n```\n> This Time Picker gives the user a text `input` with `type` === 'time'\n> For browsers that don't support `type` === 'time', this will gracefully default to `type` === 'text'\n> Does not include masking\n\nFor a time picker that only allows the user to select certain times, use the `times` prop:\n```\n <TimePickerNative\n     label=\"Record Time\"\n     times={[\n         { label: '8:00 AM', value: '08:00' },\n         { label: '9:15 AM', value: '09:15' },\n         { label: '9:45 AM', value: '09:45' }\n     ]}\n />\n // Or...\n <TimePickerNative\n     label=\"Record Time\"\n     times={[\n         '08:00',\n         '09:15',\n         '09:45\n     ]}\n />\n // Or...\n <TimePickerNative\n     label=\"Record Time\"\n     times={[\n         new Date(2020, 06, 19, 8, 0),\n         new Date(2020, 06, 19, 9, 15),\n         new Date(2020, 06, 19, 9, 45)\n     ]}\n />\n```\n> This Time Picker gives the user a `select`\n> `times` can take a list of `Date`s, time strings ('HH:mm' - 24h format), or an option object for custom labels with the value\n\nFor a less defined time picker that has a min, max, and some disabled times in between, you can also use:\n```\n <TimePickerNative\n     label=\"Record Time\"\n     min=\"8:00\"\n     max=\"12:00\"\n />\n```\n> This Time Picker gives the user a text `input`\n> On mobile displays, uses the native `time` input\n >> NOTE: mobile browsers will utilize `min` and `max`\n\nThe prop `time` uses the `ParsableDate` type\nIt can accept the following values as inputs:\n JS Date instance => `new Date(2020, 06, 19, 8, 45)`\n String time => `'23:00'`\n Number timestamp => `1595116800`\n\nThe prop `times` can accept the `ParsableDateObject` or the `ParsableDateRange` types in addition to `ParsableDate`\nIt can accept the following values\n JS Date instance => `new Date(2020, 06, 19, 8, 45)`\n String time => `'23:00'`\n Number timestamp => `1595116800`\n ParsableDateObject => {\n     label: 'Now, 8:00 AM',\n     value: '08:00' // Can be any `ParsableDate`\n }\n ParsableDateRange => {\n     label: 'Afternoon, 12:00 PM - 1:00 PM',\n     start: '12:00' // Can be any `ParsableDate`\n     end: '13:00' // Can be any `ParsableDate`\n }\n"
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 5,
								"name": "TimePickerNativeProps"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3,
											"name": "ref",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3
											]
										}
									]
								}
							}
						]
					}
				],
				"name": "BDSForwardRef"
			},
			"defaultValue": "..."
		}
	],
	"groups": [
		{
			"title": "References",
			"kind": 16777216,
			"children": [
				86
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				5
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				81,
				4
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				1
			]
		}
	]
}
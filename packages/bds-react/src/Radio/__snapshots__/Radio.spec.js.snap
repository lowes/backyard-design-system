// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Radio Snapshots Radio default snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots extra props Radio DOM id, name, value snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      name="test-name"
      type="radio"
      value="test-value"
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots extra props Radio className snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio test-class"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots extra props Radio wrapperProps snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
    style="opacity: 0;"
  >
    <input
      aria-label="radio"
      class="backyard radio"
      id="radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
      for="radio"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: checked Radio checked snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      checked=""
      class="backyard radio checked"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: checked Radio not checked snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: defaultChecked Radio default checked snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      checked=""
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: defaultChecked Radio default not checked snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: disabled Radio disabled snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio disabled"
      disabled=""
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots prop: disabled Radio enabled snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots themes Radio dark theme snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

exports[`Radio Snapshots themes Radio light theme snapshot 1`] = `
<DocumentFragment>
  .c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 label {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  position: relative;
}

.c0 input {
  height: 100%;
  width: 100%;
  position: absolute;
  opacity: 0;
  margin: 0;
  z-index: 1;
}

.c0 input:checked + label::after {
  opacity: 1;
}

.c0 input:not(:checked) + label::after {
  opacity: 0;
}

.c0 input + label::before {
  content: "";
  position: absolute;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  vertical-align: center;
  top: 0;
  left: 0;
  border-width: var(--bds-border-width-sm);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  height: var(--bds-sizes-size-16);
  width: var(--bds-sizes-size-16);
  -webkit-transition: 0.2s all ease-in-out;
  transition: 0.2s all ease-in-out;
}

.c0 input + label::after {
  content: "";
  position: absolute;
  left: var(--bds-sizes-size-3);
  top: var(--bds-sizes-size-3);
  opacity: 0;
  border-width: var(--bds-sizes-size-5);
  border-style: solid;
  border-radius: var(--bds-border-radius-circle);
  -webkit-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}

.c0 input:not(:checked).enabled + label::before,
.c0 input:not(:checked):enabled + label::before {
  border-color: var(--bds-color-border-default);
}

.c0 input:not(:checked).hover + label::before,
.c0 input:not(:checked):hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:not(:checked).focus + label::before,
.c0 input:not(:checked):focus + label::before {
  border-color: var(--bds-color-action-interactive);
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:not(:checked).disabled,
.c0 input:not(:checked):disabled,
.c0 input:not(:checked).disabled + label,
.c0 input:not(:checked):disabled + label {
  cursor: not-allowed;
}

.c0 input:not(:checked).disabled + label::before,
.c0 input:not(:checked):disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:not(:checked),
.c0 input:not(:checked) + label {
  cursor: pointer;
}

.c0 input:not(:checked) + label::before {
  background-color: transparent;
  border-color: var(--bds-color-border-default);
}

.c0 input:checked.enabled + label::before,
.c0 input:checked:enabled + label::before {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.enabled + label::after,
.c0 input:checked:enabled + label::after {
  border-color: var(--bds-color-action-interactive);
}

.c0 input:checked.hover + label::before,
.c0 input:checked:hover + label::before,
.c0 input:checked:focus:hover + label::before {
  border-color: var(--bds-color-action-interactive-hover);
}

.c0 input:checked.focus + label::before,
.c0 input:checked:focus + label::before {
  box-shadow: 0 0 0 2px var(--bds-color-border-default);
}

.c0 input:checked.disabled,
.c0 input:checked:disabled,
.c0 input:checked.disabled + label,
.c0 input:checked:disabled + label {
  cursor: not-allowed;
}

.c0 input:checked.disabled + label::before,
.c0 input:checked:disabled + label::before {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked.disabled + label::after,
.c0 input:checked:disabled + label::after {
  border-color: var(--bds-color-border-disabled);
}

.c0 input:checked,
.c0 input:checked + label {
  cursor: pointer;
}

<span
    class="c0"
  >
    <input
      class="backyard radio"
      type="radio"
      value=""
    />
    <label
      class="radio-indicator"
    />
  </span>
</DocumentFragment>
`;

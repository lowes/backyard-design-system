{
	"id": 0,
	"name": "@lowes-tech/bds-react/ProgressStepper",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 86,
			"name": "default",
			"kind": 16777216,
			"kindString": "Reference",
			"flags": {},
			"target": 1
		},
		{
			"id": 65,
			"name": "ProgressStepConnectorProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 67,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "BackyardBaseProps.as"
					}
				},
				{
					"id": 66,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "DOM classname"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.className"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						67,
						66
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 64,
							"name": "ProgressStepConnectorRef"
						}
					],
					"name": "BackyardBaseProps"
				}
			]
		},
		{
			"id": 78,
			"name": "ProgressStepContextValue",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 82,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Whether or not the progress step is disable"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 79,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Index of the progress step within the `ProgressStepper`"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 81,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Label number of the progress step\nDefaults to calculating `index + 1`"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 80,
					"name": "last",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Whether or not the progress step is the last index within `ProgressStepper`"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 83,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The current state of the progress step"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "disabled"
							},
							{
								"type": "literal",
								"value": "enabled"
							},
							{
								"type": "literal",
								"value": "active"
							},
							{
								"type": "literal",
								"value": "complete"
							},
							{
								"type": "literal",
								"value": "success"
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						82,
						79,
						81,
						80,
						83
					]
				}
			]
		},
		{
			"id": 19,
			"name": "ProgressStepProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 44,
					"name": "ariaTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "See `ButtonProps`"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.ariaTitle"
					}
				},
				{
					"id": 62,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.as"
					}
				},
				{
					"id": 20,
					"name": "caption",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Caption of the progress step"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 21,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "`ProgressStepContent` can be passed to give context to\n`ProgressStepContext` and `ProgressStepperContext`"
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.children"
					}
				},
				{
					"id": 22,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "DOM Class names"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.className"
					}
				},
				{
					"id": 48,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Type of button\n- Interactive -> (Default) Lowe's Primary Color Palette\n- Commerce -> Lowe's Commerce Color Palette\n- Contrast -> High Contrast Black/White Color Palette"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "interactive"
							},
							{
								"type": "literal",
								"value": "green"
							},
							{
								"type": "literal",
								"value": "red"
							},
							{
								"type": "literal",
								"value": "neutral"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.color"
					}
				},
				{
					"id": 23,
					"name": "completeIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Default icon to use on step complete"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 24,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Mark the step as disabled,\nwill also disable the button"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.disabled"
					}
				},
				{
					"id": 52,
					"name": "elevation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Adds elevation to the button"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.elevation"
					}
				},
				{
					"id": 25,
					"name": "errorIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Default error icon to use on step error"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 51,
					"name": "fullWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Makes button 100% the width of the container"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.fullWidth"
					}
				},
				{
					"id": 26,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon of the progress step button,\nwill override the `label` prop and any default icon\nset by `completeIcon`, `errorIcon`, and `successIcon`"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 46,
					"name": "iconAfter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon Node to display on right-side of button text",
						"text": "Note: Do not use for an icon-only button, use `IconButton` for that\n"
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.iconAfter"
					}
				},
				{
					"id": 47,
					"name": "iconBefore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon Node to display on left-side of button text",
						"text": "Note: Do not use for an icon-only button, use `IconButton` for that\n"
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.iconBefore"
					}
				},
				{
					"id": 27,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The position of the progress step within the progress stepper"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 28,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Label text of the button for the progress step"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.label"
					}
				},
				{
					"id": 29,
					"name": "last",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not the progress step is rendered last"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 38,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not the progress step is selected"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.selected"
					}
				},
				{
					"id": 49,
					"name": "shape",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shape of button\n- Rounded -> Medium Border Radius\n- Squared -> (Default) Zero Border Radius\n- Circle -> Maximum Border Radius (FAB Button)"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "rounded"
							},
							{
								"type": "literal",
								"value": "squared"
							},
							{
								"type": "literal",
								"value": "circle"
							},
							{
								"type": "literal",
								"value": "custom"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.shape"
					}
				},
				{
					"id": 39,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Size of the progress step"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "small"
							},
							{
								"type": "literal",
								"value": "large"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.size"
					}
				},
				{
					"id": 41,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "State of the progress step"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "disabled"
							},
							{
								"type": "literal",
								"value": "enabled"
							},
							{
								"type": "literal",
								"value": "active"
							},
							{
								"type": "literal",
								"value": "complete"
							},
							{
								"type": "literal",
								"value": "success"
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					}
				},
				{
					"id": 40,
					"name": "successIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Default success icon to use on step success"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 42,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title of the progress step"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.title"
					}
				},
				{
					"id": 50,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "button"
							},
							{
								"type": "literal",
								"value": "submit"
							},
							{
								"type": "literal",
								"value": "reset"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.type"
					}
				},
				{
					"id": 45,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Variant of button\n- Primary -> (Default) Solid Button w/ Background w/o Borders\n- Secondary -> Outlined Button w/o Background w/ Borders\n- Ghost -> No Background, No Borders"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "primary"
							},
							{
								"type": "literal",
								"value": "secondary"
							},
							{
								"type": "literal",
								"value": "tertiary"
							},
							{
								"type": "literal",
								"value": "ghost"
							},
							{
								"type": "literal",
								"value": "inverse"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.variant"
					}
				},
				{
					"id": 43,
					"name": "wrapperProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Progress Step wrapper props"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							},
							{
								"type": "literal",
								"value": ""
							}
						],
						"name": "BackyardBaseProps"
					}
				},
				{
					"id": 53,
					"name": "onClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 54,
							"name": "onClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onClick` trigger function",
								"tags": [
									{
										"tag": "argument",
										"text": "{Event} event - DOM event\n"
									}
								]
							},
							"parameters": [
								{
									"id": 55,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IconButtonProps.onClick"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.onClick"
					}
				},
				{
					"id": 30,
					"name": "onComplete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 31,
							"name": "onComplete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trigger function for when step is completed"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 32,
					"name": "onError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "onError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trigger function for when step encounters error"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "IconButtonProps.onError"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "IconButtonProps.onError"
					}
				},
				{
					"id": 59,
					"name": "onFocus",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "onFocus",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onFocus` trigger function",
								"tags": [
									{
										"tag": "argument",
										"text": "{Event} event - DOM event\n"
									}
								]
							},
							"parameters": [
								{
									"id": 61,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											},
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "FocusEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IconButtonProps.onFocus"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.onFocus"
					}
				},
				{
					"id": 56,
					"name": "onKeyDown",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "onKeyDown",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`onKeyDown` trigger function",
								"tags": [
									{
										"tag": "argument",
										"text": "{Event} event - DOM event\n"
									}
								]
							},
							"parameters": [
								{
									"id": 58,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										],
										"name": "KeyboardEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IconButtonProps.onKeyDown"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "IconButtonProps.onKeyDown"
					}
				},
				{
					"id": 34,
					"name": "onSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "onSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trigger function for when the step is selected"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "onSuccess",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "onSuccess",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trigger function for when step resolves an error"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						44,
						62,
						20,
						21,
						22,
						48,
						23,
						24,
						52,
						25,
						51,
						26,
						46,
						47,
						27,
						28,
						29,
						38,
						49,
						39,
						41,
						40,
						42,
						50,
						45,
						43
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						53,
						30,
						32,
						59,
						56,
						34,
						36
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "IconButtonProps"
				}
			]
		},
		{
			"id": 69,
			"name": "ProgressStepperContextValue",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 74,
					"name": "connector",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Defines the connector between progress steps"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 76,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The direction of the progress steps within progress stepper"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "column"
							},
							{
								"type": "literal",
								"value": "row"
							}
						]
					}
				},
				{
					"id": 75,
					"name": "nonLinear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Whether or not the progress within `ProgressStepper` is nonLinear\nWhen progress stepper is non-linear, the completion of each step must be controlled"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 70,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The currently selected index within `ProgressIndicator`"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 71,
					"name": "setStep",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 72,
							"name": "setStep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets a new currently selected step"
							},
							"parameters": [
								{
									"id": 73,
									"name": "step",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						74,
						76,
						75,
						70
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						71
					]
				}
			]
		},
		{
			"id": 3,
			"name": "ProgressStepperProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 16,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "BackyardBaseProps.as"
					}
				},
				{
					"id": 4,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Two or more `<ProgressStep />` components\nAs an alternative, `steps` can also be used instead"
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.children"
					}
				},
				{
					"id": 5,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "DOM class name"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.className"
					}
				},
				{
					"id": 6,
					"name": "connector",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An element to be placed between each step"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 7,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The stepper orientation (layout flow direction)"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "column"
							},
							{
								"type": "literal",
								"value": "row"
							}
						]
					}
				},
				{
					"id": 8,
					"name": "height",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Height override of the progress stepper group\nDefaults to 100% of the progress stepper wrapper"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.height"
					}
				},
				{
					"id": 9,
					"name": "nonLinear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set the `Stepper` will not assist in controlling steps for linear flow"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 10,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Size of each progress step"
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "small"
							},
							{
								"type": "literal",
								"value": "large"
							}
						]
					}
				},
				{
					"id": 11,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set the active step (zero based index)\nSet to -1 to not select any steps"
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.step"
					}
				},
				{
					"id": 12,
					"name": "steps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List of steps to create steps via data structure\nAlternatively, `children` can be used for a declarative approach"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intersection",
							"types": [
								{
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 19,
											"name": "ProgressStepProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "literal",
													"value": "size"
												},
												{
													"type": "literal",
													"value": "as"
												},
												{
													"type": "literal",
													"value": "accept"
												},
												{
													"type": "literal",
													"value": "acceptCharset"
												},
												{
													"type": "literal",
													"value": "action"
												},
												{
													"type": "literal",
													"value": "allowFullScreen"
												},
												{
													"type": "literal",
													"value": "allowTransparency"
												},
												{
													"type": "literal",
													"value": "alt"
												},
												{
													"type": "literal",
													"value": "async"
												},
												{
													"type": "literal",
													"value": "autoComplete"
												},
												{
													"type": "literal",
													"value": "autoFocus"
												},
												{
													"type": "literal",
													"value": "autoPlay"
												},
												{
													"type": "literal",
													"value": "capture"
												},
												{
													"type": "literal",
													"value": "cellPadding"
												},
												{
													"type": "literal",
													"value": "cellSpacing"
												},
												{
													"type": "literal",
													"value": "charSet"
												},
												{
													"type": "literal",
													"value": "challenge"
												},
												{
													"type": "literal",
													"value": "checked"
												},
												{
													"type": "literal",
													"value": "cite"
												},
												{
													"type": "literal",
													"value": "classID"
												},
												{
													"type": "literal",
													"value": "cols"
												},
												{
													"type": "literal",
													"value": "colSpan"
												},
												{
													"type": "literal",
													"value": "content"
												},
												{
													"type": "literal",
													"value": "controls"
												},
												{
													"type": "literal",
													"value": "coords"
												},
												{
													"type": "literal",
													"value": "crossOrigin"
												},
												{
													"type": "literal",
													"value": "data"
												},
												{
													"type": "literal",
													"value": "dateTime"
												},
												{
													"type": "literal",
													"value": "default"
												},
												{
													"type": "literal",
													"value": "defer"
												},
												{
													"type": "literal",
													"value": "disabled"
												},
												{
													"type": "literal",
													"value": "download"
												},
												{
													"type": "literal",
													"value": "encType"
												},
												{
													"type": "literal",
													"value": "form"
												},
												{
													"type": "literal",
													"value": "formAction"
												},
												{
													"type": "literal",
													"value": "formEncType"
												},
												{
													"type": "literal",
													"value": "formMethod"
												},
												{
													"type": "literal",
													"value": "formNoValidate"
												},
												{
													"type": "literal",
													"value": "formTarget"
												},
												{
													"type": "literal",
													"value": "frameBorder"
												},
												{
													"type": "literal",
													"value": "headers"
												},
												{
													"type": "literal",
													"value": "height"
												},
												{
													"type": "literal",
													"value": "high"
												},
												{
													"type": "literal",
													"value": "href"
												},
												{
													"type": "literal",
													"value": "hrefLang"
												},
												{
													"type": "literal",
													"value": "htmlFor"
												},
												{
													"type": "literal",
													"value": "httpEquiv"
												},
												{
													"type": "literal",
													"value": "integrity"
												},
												{
													"type": "literal",
													"value": "keyParams"
												},
												{
													"type": "literal",
													"value": "keyType"
												},
												{
													"type": "literal",
													"value": "kind"
												},
												{
													"type": "literal",
													"value": "label"
												},
												{
													"type": "literal",
													"value": "list"
												},
												{
													"type": "literal",
													"value": "loop"
												},
												{
													"type": "literal",
													"value": "low"
												},
												{
													"type": "literal",
													"value": "manifest"
												},
												{
													"type": "literal",
													"value": "marginHeight"
												},
												{
													"type": "literal",
													"value": "marginWidth"
												},
												{
													"type": "literal",
													"value": "max"
												},
												{
													"type": "literal",
													"value": "maxLength"
												},
												{
													"type": "literal",
													"value": "media"
												},
												{
													"type": "literal",
													"value": "mediaGroup"
												},
												{
													"type": "literal",
													"value": "method"
												},
												{
													"type": "literal",
													"value": "min"
												},
												{
													"type": "literal",
													"value": "minLength"
												},
												{
													"type": "literal",
													"value": "multiple"
												},
												{
													"type": "literal",
													"value": "muted"
												},
												{
													"type": "literal",
													"value": "name"
												},
												{
													"type": "literal",
													"value": "nonce"
												},
												{
													"type": "literal",
													"value": "noValidate"
												},
												{
													"type": "literal",
													"value": "open"
												},
												{
													"type": "literal",
													"value": "optimum"
												},
												{
													"type": "literal",
													"value": "pattern"
												},
												{
													"type": "literal",
													"value": "placeholder"
												},
												{
													"type": "literal",
													"value": "playsInline"
												},
												{
													"type": "literal",
													"value": "poster"
												},
												{
													"type": "literal",
													"value": "preload"
												},
												{
													"type": "literal",
													"value": "readOnly"
												},
												{
													"type": "literal",
													"value": "rel"
												},
												{
													"type": "literal",
													"value": "required"
												},
												{
													"type": "literal",
													"value": "reversed"
												},
												{
													"type": "literal",
													"value": "rows"
												},
												{
													"type": "literal",
													"value": "rowSpan"
												},
												{
													"type": "literal",
													"value": "sandbox"
												},
												{
													"type": "literal",
													"value": "scope"
												},
												{
													"type": "literal",
													"value": "scoped"
												},
												{
													"type": "literal",
													"value": "scrolling"
												},
												{
													"type": "literal",
													"value": "seamless"
												},
												{
													"type": "literal",
													"value": "selected"
												},
												{
													"type": "literal",
													"value": "shape"
												},
												{
													"type": "literal",
													"value": "sizes"
												},
												{
													"type": "literal",
													"value": "span"
												},
												{
													"type": "literal",
													"value": "src"
												},
												{
													"type": "literal",
													"value": "srcDoc"
												},
												{
													"type": "literal",
													"value": "srcLang"
												},
												{
													"type": "literal",
													"value": "srcSet"
												},
												{
													"type": "literal",
													"value": "start"
												},
												{
													"type": "literal",
													"value": "step"
												},
												{
													"type": "literal",
													"value": "summary"
												},
												{
													"type": "literal",
													"value": "target"
												},
												{
													"type": "literal",
													"value": "type"
												},
												{
													"type": "literal",
													"value": "useMap"
												},
												{
													"type": "literal",
													"value": "value"
												},
												{
													"type": "literal",
													"value": "width"
												},
												{
													"type": "literal",
													"value": "wmode"
												},
												{
													"type": "literal",
													"value": "wrap"
												},
												{
													"type": "literal",
													"value": "defaultChecked"
												},
												{
													"type": "literal",
													"value": "defaultValue"
												},
												{
													"type": "literal",
													"value": "suppressContentEditableWarning"
												},
												{
													"type": "literal",
													"value": "suppressHydrationWarning"
												},
												{
													"type": "literal",
													"value": "accessKey"
												},
												{
													"type": "literal",
													"value": "className"
												},
												{
													"type": "literal",
													"value": "contentEditable"
												},
												{
													"type": "literal",
													"value": "contextMenu"
												},
												{
													"type": "literal",
													"value": "dir"
												},
												{
													"type": "literal",
													"value": "draggable"
												},
												{
													"type": "literal",
													"value": "hidden"
												},
												{
													"type": "literal",
													"value": "id"
												},
												{
													"type": "literal",
													"value": "lang"
												},
												{
													"type": "literal",
													"value": "slot"
												},
												{
													"type": "literal",
													"value": "spellCheck"
												},
												{
													"type": "literal",
													"value": "style"
												},
												{
													"type": "literal",
													"value": "tabIndex"
												},
												{
													"type": "literal",
													"value": "title"
												},
												{
													"type": "literal",
													"value": "translate"
												},
												{
													"type": "literal",
													"value": "radioGroup"
												},
												{
													"type": "literal",
													"value": "role"
												},
												{
													"type": "literal",
													"value": "about"
												},
												{
													"type": "literal",
													"value": "datatype"
												},
												{
													"type": "literal",
													"value": "inlist"
												},
												{
													"type": "literal",
													"value": "prefix"
												},
												{
													"type": "literal",
													"value": "property"
												},
												{
													"type": "literal",
													"value": "resource"
												},
												{
													"type": "literal",
													"value": "typeof"
												},
												{
													"type": "literal",
													"value": "vocab"
												},
												{
													"type": "literal",
													"value": "autoCapitalize"
												},
												{
													"type": "literal",
													"value": "autoCorrect"
												},
												{
													"type": "literal",
													"value": "autoSave"
												},
												{
													"type": "literal",
													"value": "color"
												},
												{
													"type": "literal",
													"value": "itemProp"
												},
												{
													"type": "literal",
													"value": "itemScope"
												},
												{
													"type": "literal",
													"value": "itemType"
												},
												{
													"type": "literal",
													"value": "itemID"
												},
												{
													"type": "literal",
													"value": "itemRef"
												},
												{
													"type": "literal",
													"value": "results"
												},
												{
													"type": "literal",
													"value": "security"
												},
												{
													"type": "literal",
													"value": "unselectable"
												},
												{
													"type": "literal",
													"value": "inputMode"
												},
												{
													"type": "literal",
													"value": "is"
												},
												{
													"type": "literal",
													"value": "aria-activedescendant"
												},
												{
													"type": "literal",
													"value": "aria-atomic"
												},
												{
													"type": "literal",
													"value": "aria-autocomplete"
												},
												{
													"type": "literal",
													"value": "aria-busy"
												},
												{
													"type": "literal",
													"value": "aria-checked"
												},
												{
													"type": "literal",
													"value": "aria-colcount"
												},
												{
													"type": "literal",
													"value": "aria-colindex"
												},
												{
													"type": "literal",
													"value": "aria-colspan"
												},
												{
													"type": "literal",
													"value": "aria-controls"
												},
												{
													"type": "literal",
													"value": "aria-current"
												},
												{
													"type": "literal",
													"value": "aria-describedby"
												},
												{
													"type": "literal",
													"value": "aria-details"
												},
												{
													"type": "literal",
													"value": "aria-disabled"
												},
												{
													"type": "literal",
													"value": "aria-dropeffect"
												},
												{
													"type": "literal",
													"value": "aria-errormessage"
												},
												{
													"type": "literal",
													"value": "aria-expanded"
												},
												{
													"type": "literal",
													"value": "aria-flowto"
												},
												{
													"type": "literal",
													"value": "aria-grabbed"
												},
												{
													"type": "literal",
													"value": "aria-haspopup"
												},
												{
													"type": "literal",
													"value": "aria-hidden"
												},
												{
													"type": "literal",
													"value": "aria-invalid"
												},
												{
													"type": "literal",
													"value": "aria-keyshortcuts"
												},
												{
													"type": "literal",
													"value": "aria-label"
												},
												{
													"type": "literal",
													"value": "aria-labelledby"
												},
												{
													"type": "literal",
													"value": "aria-level"
												},
												{
													"type": "literal",
													"value": "aria-live"
												},
												{
													"type": "literal",
													"value": "aria-modal"
												},
												{
													"type": "literal",
													"value": "aria-multiline"
												},
												{
													"type": "literal",
													"value": "aria-multiselectable"
												},
												{
													"type": "literal",
													"value": "aria-orientation"
												},
												{
													"type": "literal",
													"value": "aria-owns"
												},
												{
													"type": "literal",
													"value": "aria-placeholder"
												},
												{
													"type": "literal",
													"value": "aria-posinset"
												},
												{
													"type": "literal",
													"value": "aria-pressed"
												},
												{
													"type": "literal",
													"value": "aria-readonly"
												},
												{
													"type": "literal",
													"value": "aria-relevant"
												},
												{
													"type": "literal",
													"value": "aria-required"
												},
												{
													"type": "literal",
													"value": "aria-roledescription"
												},
												{
													"type": "literal",
													"value": "aria-rowcount"
												},
												{
													"type": "literal",
													"value": "aria-rowindex"
												},
												{
													"type": "literal",
													"value": "aria-rowspan"
												},
												{
													"type": "literal",
													"value": "aria-selected"
												},
												{
													"type": "literal",
													"value": "aria-setsize"
												},
												{
													"type": "literal",
													"value": "aria-sort"
												},
												{
													"type": "literal",
													"value": "aria-valuemax"
												},
												{
													"type": "literal",
													"value": "aria-valuemin"
												},
												{
													"type": "literal",
													"value": "aria-valuenow"
												},
												{
													"type": "literal",
													"value": "aria-valuetext"
												},
												{
													"type": "literal",
													"value": "children"
												},
												{
													"type": "literal",
													"value": "dangerouslySetInnerHTML"
												},
												{
													"type": "literal",
													"value": "onCopy"
												},
												{
													"type": "literal",
													"value": "onCopyCapture"
												},
												{
													"type": "literal",
													"value": "onCut"
												},
												{
													"type": "literal",
													"value": "onCutCapture"
												},
												{
													"type": "literal",
													"value": "onPaste"
												},
												{
													"type": "literal",
													"value": "onPasteCapture"
												},
												{
													"type": "literal",
													"value": "onCompositionEnd"
												},
												{
													"type": "literal",
													"value": "onCompositionEndCapture"
												},
												{
													"type": "literal",
													"value": "onCompositionStart"
												},
												{
													"type": "literal",
													"value": "onCompositionStartCapture"
												},
												{
													"type": "literal",
													"value": "onCompositionUpdate"
												},
												{
													"type": "literal",
													"value": "onCompositionUpdateCapture"
												},
												{
													"type": "literal",
													"value": "onFocus"
												},
												{
													"type": "literal",
													"value": "onFocusCapture"
												},
												{
													"type": "literal",
													"value": "onBlur"
												},
												{
													"type": "literal",
													"value": "onBlurCapture"
												},
												{
													"type": "literal",
													"value": "onChange"
												},
												{
													"type": "literal",
													"value": "onChangeCapture"
												},
												{
													"type": "literal",
													"value": "onBeforeInput"
												},
												{
													"type": "literal",
													"value": "onBeforeInputCapture"
												},
												{
													"type": "literal",
													"value": "onInput"
												},
												{
													"type": "literal",
													"value": "onInputCapture"
												},
												{
													"type": "literal",
													"value": "onReset"
												},
												{
													"type": "literal",
													"value": "onResetCapture"
												},
												{
													"type": "literal",
													"value": "onSubmit"
												},
												{
													"type": "literal",
													"value": "onSubmitCapture"
												},
												{
													"type": "literal",
													"value": "onInvalid"
												},
												{
													"type": "literal",
													"value": "onInvalidCapture"
												},
												{
													"type": "literal",
													"value": "onLoad"
												},
												{
													"type": "literal",
													"value": "onLoadCapture"
												},
												{
													"type": "literal",
													"value": "onError"
												},
												{
													"type": "literal",
													"value": "onErrorCapture"
												},
												{
													"type": "literal",
													"value": "onKeyDown"
												},
												{
													"type": "literal",
													"value": "onKeyDownCapture"
												},
												{
													"type": "literal",
													"value": "onKeyPress"
												},
												{
													"type": "literal",
													"value": "onKeyPressCapture"
												},
												{
													"type": "literal",
													"value": "onKeyUp"
												},
												{
													"type": "literal",
													"value": "onKeyUpCapture"
												},
												{
													"type": "literal",
													"value": "onAbort"
												},
												{
													"type": "literal",
													"value": "onAbortCapture"
												},
												{
													"type": "literal",
													"value": "onCanPlay"
												},
												{
													"type": "literal",
													"value": "onCanPlayCapture"
												},
												{
													"type": "literal",
													"value": "onCanPlayThrough"
												},
												{
													"type": "literal",
													"value": "onCanPlayThroughCapture"
												},
												{
													"type": "literal",
													"value": "onDurationChange"
												},
												{
													"type": "literal",
													"value": "onDurationChangeCapture"
												},
												{
													"type": "literal",
													"value": "onEmptied"
												},
												{
													"type": "literal",
													"value": "onEmptiedCapture"
												},
												{
													"type": "literal",
													"value": "onEncrypted"
												},
												{
													"type": "literal",
													"value": "onEncryptedCapture"
												},
												{
													"type": "literal",
													"value": "onEnded"
												},
												{
													"type": "literal",
													"value": "onEndedCapture"
												},
												{
													"type": "literal",
													"value": "onLoadedData"
												},
												{
													"type": "literal",
													"value": "onLoadedDataCapture"
												},
												{
													"type": "literal",
													"value": "onLoadedMetadata"
												},
												{
													"type": "literal",
													"value": "onLoadedMetadataCapture"
												},
												{
													"type": "literal",
													"value": "onLoadStart"
												},
												{
													"type": "literal",
													"value": "onLoadStartCapture"
												},
												{
													"type": "literal",
													"value": "onPause"
												},
												{
													"type": "literal",
													"value": "onPauseCapture"
												},
												{
													"type": "literal",
													"value": "onPlay"
												},
												{
													"type": "literal",
													"value": "onPlayCapture"
												},
												{
													"type": "literal",
													"value": "onPlaying"
												},
												{
													"type": "literal",
													"value": "onPlayingCapture"
												},
												{
													"type": "literal",
													"value": "onProgress"
												},
												{
													"type": "literal",
													"value": "onProgressCapture"
												},
												{
													"type": "literal",
													"value": "onRateChange"
												},
												{
													"type": "literal",
													"value": "onRateChangeCapture"
												},
												{
													"type": "literal",
													"value": "onSeeked"
												},
												{
													"type": "literal",
													"value": "onSeekedCapture"
												},
												{
													"type": "literal",
													"value": "onSeeking"
												},
												{
													"type": "literal",
													"value": "onSeekingCapture"
												},
												{
													"type": "literal",
													"value": "onStalled"
												},
												{
													"type": "literal",
													"value": "onStalledCapture"
												},
												{
													"type": "literal",
													"value": "onSuspend"
												},
												{
													"type": "literal",
													"value": "onSuspendCapture"
												},
												{
													"type": "literal",
													"value": "onTimeUpdate"
												},
												{
													"type": "literal",
													"value": "onTimeUpdateCapture"
												},
												{
													"type": "literal",
													"value": "onVolumeChange"
												},
												{
													"type": "literal",
													"value": "onVolumeChangeCapture"
												},
												{
													"type": "literal",
													"value": "onWaiting"
												},
												{
													"type": "literal",
													"value": "onWaitingCapture"
												},
												{
													"type": "literal",
													"value": "onAuxClick"
												},
												{
													"type": "literal",
													"value": "onAuxClickCapture"
												},
												{
													"type": "literal",
													"value": "onClick"
												},
												{
													"type": "literal",
													"value": "onClickCapture"
												},
												{
													"type": "literal",
													"value": "onContextMenu"
												},
												{
													"type": "literal",
													"value": "onContextMenuCapture"
												},
												{
													"type": "literal",
													"value": "onDoubleClick"
												},
												{
													"type": "literal",
													"value": "onDoubleClickCapture"
												},
												{
													"type": "literal",
													"value": "onDrag"
												},
												{
													"type": "literal",
													"value": "onDragCapture"
												},
												{
													"type": "literal",
													"value": "onDragEnd"
												},
												{
													"type": "literal",
													"value": "onDragEndCapture"
												},
												{
													"type": "literal",
													"value": "onDragEnter"
												},
												{
													"type": "literal",
													"value": "onDragEnterCapture"
												},
												{
													"type": "literal",
													"value": "onDragExit"
												},
												{
													"type": "literal",
													"value": "onDragExitCapture"
												},
												{
													"type": "literal",
													"value": "onDragLeave"
												},
												{
													"type": "literal",
													"value": "onDragLeaveCapture"
												},
												{
													"type": "literal",
													"value": "onDragOver"
												},
												{
													"type": "literal",
													"value": "onDragOverCapture"
												},
												{
													"type": "literal",
													"value": "onDragStart"
												},
												{
													"type": "literal",
													"value": "onDragStartCapture"
												},
												{
													"type": "literal",
													"value": "onDrop"
												},
												{
													"type": "literal",
													"value": "onDropCapture"
												},
												{
													"type": "literal",
													"value": "onMouseDown"
												},
												{
													"type": "literal",
													"value": "onMouseDownCapture"
												},
												{
													"type": "literal",
													"value": "onMouseEnter"
												},
												{
													"type": "literal",
													"value": "onMouseLeave"
												},
												{
													"type": "literal",
													"value": "onMouseMove"
												},
												{
													"type": "literal",
													"value": "onMouseMoveCapture"
												},
												{
													"type": "literal",
													"value": "onMouseOut"
												},
												{
													"type": "literal",
													"value": "onMouseOutCapture"
												},
												{
													"type": "literal",
													"value": "onMouseOver"
												},
												{
													"type": "literal",
													"value": "onMouseOverCapture"
												},
												{
													"type": "literal",
													"value": "onMouseUp"
												},
												{
													"type": "literal",
													"value": "onMouseUpCapture"
												},
												{
													"type": "literal",
													"value": "onSelect"
												},
												{
													"type": "literal",
													"value": "onSelectCapture"
												},
												{
													"type": "literal",
													"value": "onTouchCancel"
												},
												{
													"type": "literal",
													"value": "onTouchCancelCapture"
												},
												{
													"type": "literal",
													"value": "onTouchEnd"
												},
												{
													"type": "literal",
													"value": "onTouchEndCapture"
												},
												{
													"type": "literal",
													"value": "onTouchMove"
												},
												{
													"type": "literal",
													"value": "onTouchMoveCapture"
												},
												{
													"type": "literal",
													"value": "onTouchStart"
												},
												{
													"type": "literal",
													"value": "onTouchStartCapture"
												},
												{
													"type": "literal",
													"value": "onPointerDown"
												},
												{
													"type": "literal",
													"value": "onPointerDownCapture"
												},
												{
													"type": "literal",
													"value": "onPointerMove"
												},
												{
													"type": "literal",
													"value": "onPointerMoveCapture"
												},
												{
													"type": "literal",
													"value": "onPointerUp"
												},
												{
													"type": "literal",
													"value": "onPointerUpCapture"
												},
												{
													"type": "literal",
													"value": "onPointerCancel"
												},
												{
													"type": "literal",
													"value": "onPointerCancelCapture"
												},
												{
													"type": "literal",
													"value": "onPointerEnter"
												},
												{
													"type": "literal",
													"value": "onPointerEnterCapture"
												},
												{
													"type": "literal",
													"value": "onPointerLeave"
												},
												{
													"type": "literal",
													"value": "onPointerLeaveCapture"
												},
												{
													"type": "literal",
													"value": "onPointerOver"
												},
												{
													"type": "literal",
													"value": "onPointerOverCapture"
												},
												{
													"type": "literal",
													"value": "onPointerOut"
												},
												{
													"type": "literal",
													"value": "onPointerOutCapture"
												},
												{
													"type": "literal",
													"value": "onGotPointerCapture"
												},
												{
													"type": "literal",
													"value": "onGotPointerCaptureCapture"
												},
												{
													"type": "literal",
													"value": "onLostPointerCapture"
												},
												{
													"type": "literal",
													"value": "onLostPointerCaptureCapture"
												},
												{
													"type": "literal",
													"value": "onScroll"
												},
												{
													"type": "literal",
													"value": "onScrollCapture"
												},
												{
													"type": "literal",
													"value": "onWheel"
												},
												{
													"type": "literal",
													"value": "onWheelCapture"
												},
												{
													"type": "literal",
													"value": "onAnimationStart"
												},
												{
													"type": "literal",
													"value": "onAnimationStartCapture"
												},
												{
													"type": "literal",
													"value": "onAnimationEnd"
												},
												{
													"type": "literal",
													"value": "onAnimationEndCapture"
												},
												{
													"type": "literal",
													"value": "onAnimationIteration"
												},
												{
													"type": "literal",
													"value": "onAnimationIterationCapture"
												},
												{
													"type": "literal",
													"value": "onTransitionEnd"
												},
												{
													"type": "literal",
													"value": "onTransitionEndCapture"
												},
												{
													"type": "literal",
													"value": "css"
												},
												{
													"type": "literal",
													"value": "key"
												},
												{
													"type": "literal",
													"value": "caption"
												},
												{
													"type": "literal",
													"value": "completeIcon"
												},
												{
													"type": "literal",
													"value": "errorIcon"
												},
												{
													"type": "literal",
													"value": "icon"
												},
												{
													"type": "literal",
													"value": "index"
												},
												{
													"type": "literal",
													"value": "last"
												},
												{
													"type": "literal",
													"value": "onComplete"
												},
												{
													"type": "literal",
													"value": "onSelected"
												},
												{
													"type": "literal",
													"value": "onSuccess"
												},
												{
													"type": "literal",
													"value": "successIcon"
												},
												{
													"type": "literal",
													"value": "state"
												},
												{
													"type": "literal",
													"value": "wrapperProps"
												},
												{
													"type": "literal",
													"value": "ariaTitle"
												},
												{
													"type": "literal",
													"value": "variant"
												},
												{
													"type": "literal",
													"value": "iconAfter"
												},
												{
													"type": "literal",
													"value": "iconBefore"
												},
												{
													"type": "literal",
													"value": "fullWidth"
												},
												{
													"type": "literal",
													"value": "elevation"
												}
											]
										}
									],
									"name": "Pick"
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 13,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {}
									}
								}
							]
						}
					}
				},
				{
					"id": 14,
					"name": "stretch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not the progress stepper wrapper will\nstretch height and width to fit 100% of its container"
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 15,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width override of the progress stepper group\nDefaults to 100% of the progress stepper wrapper"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "BackyardBaseProps.width"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						16,
						4,
						5,
						6,
						7,
						8,
						9,
						10,
						11,
						12,
						14,
						15
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2,
							"name": "ProgressStepperRef"
						},
						{
							"type": "reference",
							"name": "ProgressStepperOverrideProps"
						}
					],
					"name": "BackyardBaseProps"
				}
			]
		},
		{
			"id": 64,
			"name": "ProgressStepConnectorRef",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "reference",
				"name": "HTMLDivElement"
			}
		},
		{
			"id": 18,
			"name": "ProgressStepRef",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "reference",
				"name": "IconButtonRef"
			}
		},
		{
			"id": 2,
			"name": "ProgressStepperRef",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"type": {
				"type": "reference",
				"name": "FormGroupRef"
			}
		},
		{
			"id": 17,
			"name": "ProgressStep",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Backyard React Progress Step",
				"text": "`ProgressStep` is used as a child of `ProgressStepper` to provide the current step of the stepper to the user.\nNote: `ProgressStep` __must__ be a child of `ProgressStepper`\n\nThe `ProgressStep` calculates whether or not it is selected through the supplied `step` prop of the parent `ProgressStepper`.\n\nWhen the `disabled` prop is true, the button and text becomes disabled from the user.\n\nThe content of the button is determined by the following in respective order of importance:\n * `icon` prop - ex. <CreditCard />\n * `label` prop - ex. \"A\"\n * `index + 1` number of the step\n\nExample:\n```\n <ProgressStep\n     icon={<CreditCard />}\n     title=\"Credit Card\"\n     caption=\"Enter your credit card information\"\n />\n```\n"
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 19,
						"name": "ProgressStepProps"
					}
				],
				"name": "BDSForwardRef"
			},
			"defaultValue": "..."
		},
		{
			"id": 77,
			"name": "ProgressStepContext",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 78,
						"name": "ProgressStepContextValue"
					}
				],
				"name": "Context"
			},
			"defaultValue": "..."
		},
		{
			"id": 1,
			"name": "ProgressStepper",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Backyard React Progress Stepper",
				"text": "`ProgressStepper` is used to provide steps to the user to navigate through a wizard-like form.\n\nThe `step` prop, or the stepper's current step, must be controlled externally for the stepper to update.\nThis allows the developer to manage any content that `ProgressStepper` is providing navigation to externally.\n\nBy default the stepper is linear, meaning each step behind the current `step` state is counted as completed.\nThis behavior can be turned off with the `nonLinear` flag prop, then each step's `state` can be set to `complete`\nindependently of the rest of the steps, so the user can complete each step in any order.\n\nThere are two methods to providing steps:\n\n1) Declaratively through `children` with the `ProgressStep` component\n2) Structurally through `steps` which takes any `ProgressStepProps` property\n\nExample:\n```\n <ProgressStepper\n     direction=\"row\"\n     step={step}\n >\n     <ProgressStep\n         title=\"First Step\"\n         caption=\"caption Text for step one\"\n         onClick={() => setStep(0)}\n     />\n     <ProgressStep\n         state={states[1]}\n         title=\"Second Step\"\n         caption=\"caption text for step two\"\n     />\n     <ProgressStep\n         state={states[2]}\n         title=\"Third Step\"\n         caption=\"caption text for step three\"\n     />\n </ProgressStepper>\n```\n\nExample:\n```\n <ProgressStepper\n     nonLinear\n     direction=\"row\"\n     step={step}\n     steps={[{\n         title: 'First Step',\n         caption: 'caption Text for step one',\n         onClick: () => setStep(0)\n     }, {\n         title: 'Second Step',\n         caption: 'caption text for step two',\n         onClick: () => setStep(1)\n     }, {\n         disabled: true,\n         title: 'Third Step',\n         caption: 'caption text for step three (disabled)',\n         onClick: () => setStep(2)\n     }, {\n         title: 'Fourth Step',\n         caption: 'caption text for step four',\n         onClick: () => setStep(3)\n     }]}\n />\n```\n"
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 3,
						"name": "ProgressStepperProps"
					}
				],
				"name": "BDSForwardRef"
			},
			"defaultValue": "..."
		},
		{
			"id": 68,
			"name": "ProgressStepperContext",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 69,
						"name": "ProgressStepperContextValue"
					}
				],
				"name": "Context"
			},
			"defaultValue": "..."
		},
		{
			"id": 84,
			"name": "useProgressStepper",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 85,
					"name": "useProgressStepper",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Hook for accessing progress stepper context"
					},
					"type": {
						"type": "reference",
						"id": 69,
						"name": "ProgressStepperContextValue"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "References",
			"kind": 16777216,
			"children": [
				86
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				65,
				78,
				19,
				69,
				3
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				64,
				18,
				2
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				17,
				77,
				1,
				68
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				84
			]
		}
	]
}